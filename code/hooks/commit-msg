#!/bin/sh
#
# Called by "git commit" with one argument, the name of the file
# that has the commit message.  The hook should exit with non-zero
# status after issuing an appropriate message if it wants to stop the
# commit.  The hook is allowed to edit the commit message file.

##################################################################################
## This hook commits changes to the code branch when commiting to deploy branch. #
##################################################################################

DEPLOY_BRANCH="master"
CODE_BRANCH="github"

commit_msg="$(cat "$1")"

current_branch="$(git rev-parse --abbrev-ref HEAD)"

if [ "$current_branch" = "$DEPLOY_BRANCH" ]; then
	echo "Deployment branch is being committed to. Making copy of changes and committing to code branch as well"

	git stash push --keep-index --include-untracked # Stash with everything. This one will be used to restore the original state at the end
	git stash apply --index # Apply the original state back, keeping the stash

	git stash push --keep-index # Stash all unstaged (but tracked) changes (we will get rid of this later)
	git stash push --include-untracked # Stash all staged changes (either tracked or untracked)

	git stash drop stash@{1} # Remove stash with unstaged (but tracked) changes (these are changes that the commiter did not want to commit)

	git checkout $CODE_BRANCH

	git reset --hard

	# It turns out that "git stash pop" only drops the stash if there are no conflicts.
	# In our case, we need it to always be dropped, and we expect conflicts most of the time.
	# So applying it and then dropping it manually ensures us this behavior.
	git stash apply
	git stash drop

	git reset --mixed

	# If .gitignore was changed in the other branch, the changes will be reverted
	git checkout HEAD -- .gitignore

	git add :/
	git commit -m "$commit_msg" --no-verify

	git checkout $DEPLOY_BRANCH
	git stash pop --index
fi

exit 0
