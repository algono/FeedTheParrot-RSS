#!/bin/sh
#
# Called by "git commit" with no parameters after a commit is made.
#
# This hook is meant primarily for notification, and cannot affect the outcome of 'git commit'.

##################################################################################
## This hook commits changes to the code branch when commiting to deploy branch. #
##################################################################################

DEPLOY_BRANCH="master"
CODE_BRANCH="codebase"

current_branch="$(git rev-parse --abbrev-ref HEAD)"

if [ "$current_branch" = "$DEPLOY_BRANCH" ]; then
	echo "Deployment branch has been commited to. Making cherry-pick of commit and committing to code branch as well"

	commit_msg="$(git log -1 --pretty=%B)"

	git stash --include-untracked # Stash changes not added to the commit
	stashed=$? # Store the stash command return value (0 = success, other = error)

	git checkout "$CODE_BRANCH"

	git reset --hard

	# Get the commit changes from the deploy branch.
	# In case of merge conflict, always prioritize the deploy branch changes ('theirs')
	git cherry-pick --no-commit "$DEPLOY_BRANCH" --strategy=recursive --strategy-option=theirs

	git reset --mixed

	# If .gitignore was changed in the other branch, the changes will be reverted
	git checkout HEAD -- .gitignore

	git add --all
	git commit -m "$commit_msg" --no-verify

	git checkout "$DEPLOY_BRANCH"
	
	# If any changes were stashed, pop them back
	[ $stashed -eq 0 ] && git stash pop
fi

exit 0
